var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { appInitialize } from './app-initialize';
import { ConfigToken } from './providers/config';
import * as c from './directives';
import * as d from './directives/proxies';
import * as p from './providers';
var DECLARATIONS = [
    // proxies
    d.App,
    d.Avatar,
    d.BackButton,
    d.Backdrop,
    d.Badge,
    d.Button,
    d.Buttons,
    d.Card,
    d.CardContent,
    d.CardHeader,
    d.CardSubtitle,
    d.CardTitle,
    d.Checkbox,
    d.Chip,
    d.Col,
    d.Content,
    d.Datetime,
    d.Fab,
    d.FabButton,
    d.FabList,
    d.Footer,
    d.Grid,
    d.Header,
    d.Icon,
    d.Img,
    d.InfiniteScroll,
    d.InfiniteScrollContent,
    d.Input,
    d.Item,
    d.ItemDivider,
    d.ItemGroup,
    d.ItemOption,
    d.ItemOptions,
    d.ItemSliding,
    d.Label,
    d.List,
    d.ListHeader,
    d.Menu,
    d.MenuButton,
    d.MenuToggle,
    d.Nav,
    d.NavPop,
    d.NavPush,
    d.NavSetRoot,
    d.Note,
    d.Radio,
    d.RadioGroup,
    d.Range,
    d.Refresher,
    d.RefresherContent,
    d.Reorder,
    d.ReorderGroup,
    d.RippleEffect,
    d.Row,
    d.Searchbar,
    d.Segment,
    d.SegmentButton,
    d.Select,
    d.SelectOption,
    d.SelectPopover,
    d.SkeletonText,
    d.Slide,
    d.Slides,
    d.Spinner,
    d.SplitPane,
    d.Tab,
    d.TabBar,
    d.TabButton,
    d.Tabs,
    d.Text,
    d.Textarea,
    d.Thumbnail,
    d.Toggle,
    d.Toolbar,
    d.ToolbarTitle,
    // ngModel accessors
    c.BooleanValueAccessor,
    c.NumericValueAccessor,
    c.RadioValueAccessor,
    c.SelectValueAccessor,
    c.TextValueAccessor,
    // navigation
    c.IonBackButton,
    c.IonRouterOutlet,
    c.NavDelegate,
    c.TabDelegate,
    c.TabsDelegate,
    c.HrefDelegate,
    // virtual scroll
    c.VirtualFooter,
    c.VirtualHeader,
    c.VirtualItem,
    c.VirtualScroll
];
var PROVIDERS = [
    p.ActionSheetController,
    p.AlertController,
    p.Config,
    p.LoadingController,
    p.PickerController,
    p.ToastController,
    p.MenuController,
    p.NavController,
    p.Platform,
    p.Events,
    p.DomController
];
var IonicModule = /** @class */ (function () {
    function IonicModule() {
    }
    IonicModule_1 = IonicModule;
    IonicModule.forRoot = function (config) {
        return {
            ngModule: IonicModule_1,
            providers: [
                {
                    provide: ConfigToken,
                    useValue: config
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInitialize,
                    multi: true,
                    deps: [
                        ConfigToken
                    ]
                }
            ].concat(PROVIDERS)
        };
    };
    var IonicModule_1;
    IonicModule = IonicModule_1 = __decorate([
        NgModule({
            declarations: DECLARATIONS,
            exports: DECLARATIONS,
            providers: [p.AngularDelegate, p.ModalController, p.PopoverController],
            imports: [CommonModule]
        })
    ], IonicModule);
    return IonicModule;
}());
export { IonicModule };
