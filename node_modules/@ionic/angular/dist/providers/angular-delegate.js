var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ApplicationRef, Injectable, InjectionToken, Injector, NgZone } from '@angular/core';
import { NavParams } from '../directives/navigation/nav-params';
var AngularDelegate = /** @class */ (function () {
    function AngularDelegate(zone, appRef) {
        this.zone = zone;
        this.appRef = appRef;
    }
    AngularDelegate.prototype.create = function (resolver, injector, location) {
        return new AngularFrameworkDelegate(resolver, injector, location, this.appRef, this.zone);
    };
    AngularDelegate = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [NgZone,
            ApplicationRef])
    ], AngularDelegate);
    return AngularDelegate;
}());
export { AngularDelegate };
var AngularFrameworkDelegate = /** @class */ (function () {
    function AngularFrameworkDelegate(resolver, injector, location, appRef, zone) {
        this.resolver = resolver;
        this.injector = injector;
        this.location = location;
        this.appRef = appRef;
        this.zone = zone;
        this.elRefMap = new WeakMap();
    }
    AngularFrameworkDelegate.prototype.attachViewToDom = function (container, component, params, cssClasses) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.zone.run(function () {
                var el = attachView(_this.resolver, _this.injector, _this.location, _this.appRef, _this.elRefMap, container, component, params, cssClasses);
                resolve(el);
            });
        });
    };
    AngularFrameworkDelegate.prototype.removeViewFromDom = function (_container, component) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.zone.run(function () {
                var componentRef = _this.elRefMap.get(component);
                if (componentRef) {
                    componentRef.destroy();
                    _this.elRefMap.delete(component);
                }
                resolve();
            });
        });
    };
    return AngularFrameworkDelegate;
}());
export { AngularFrameworkDelegate };
export function attachView(resolver, injector, location, appRef, elRefMap, container, component, params, cssClasses) {
    var factory = resolver.resolveComponentFactory(component);
    var childInjector = Injector.create({
        providers: getProviders(params),
        parent: injector
    });
    var componentRef = (location)
        ? location.createComponent(factory, location.length, childInjector)
        : factory.create(childInjector);
    var instance = componentRef.instance;
    var hostElement = componentRef.location.nativeElement;
    if (params) {
        Object.assign(instance, params);
    }
    if (cssClasses) {
        for (var _i = 0, cssClasses_1 = cssClasses; _i < cssClasses_1.length; _i++) {
            var clazz = cssClasses_1[_i];
            hostElement.classList.add(clazz);
        }
    }
    bindLifecycleEvents(instance, hostElement);
    container.appendChild(hostElement);
    if (!location) {
        appRef.attachView(componentRef.hostView);
    }
    componentRef.changeDetectorRef.reattach();
    elRefMap.set(hostElement, componentRef);
    return hostElement;
}
var LIFECYCLES = [
    "ionViewWillEnter" /* WillEnter */,
    "ionViewDidEnter" /* DidEnter */,
    "ionViewWillLeave" /* WillLeave */,
    "ionViewDidLeave" /* DidLeave */,
    "ionViewWillUnload" /* WillUnload */
];
export function bindLifecycleEvents(instance, element) {
    LIFECYCLES.forEach(function (eventName) {
        element.addEventListener(eventName, function (ev) {
            if (typeof instance[eventName] === 'function') {
                instance[eventName](ev.detail);
            }
        });
    });
}
var NavParamsToken = new InjectionToken('NavParamsToken');
function getProviders(params) {
    return [
        {
            provide: NavParamsToken, useValue: params
        },
        {
            provide: NavParams, useFactory: provideNavParamsInjectable, deps: [NavParamsToken]
        }
    ];
}
function provideNavParamsInjectable(params) {
    return new NavParams(params);
}
