var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Directive, ElementRef, HostListener, Input, Optional } from '@angular/core';
import { Router } from '@angular/router';
import { NavController } from '../../providers/nav-controller';
var HrefDelegate = /** @class */ (function () {
    function HrefDelegate(router, navCtrl, elementRef) {
        this.router = router;
        this.navCtrl = navCtrl;
        this.elementRef = elementRef;
        this.routerDirection = 'forward';
    }
    Object.defineProperty(HrefDelegate.prototype, "routerLink", {
        set: function (_) {
            this.elementRef.nativeElement.button = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HrefDelegate.prototype, "href", {
        get: function () {
            return this.elementRef.nativeElement.href;
        },
        set: function (value) {
            this.elementRef.nativeElement.href = value;
        },
        enumerable: true,
        configurable: true
    });
    HrefDelegate.prototype.onClick = function (ev) {
        var url = this.href;
        if (this.router && url != null && url[0] !== '#' && url.indexOf('://') === -1) {
            ev.preventDefault();
            this.navCtrl.setIntent(textToIntent(this.routerDirection));
            this.router.navigateByUrl(url);
        }
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], HrefDelegate.prototype, "routerDirection", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], HrefDelegate.prototype, "routerLink", null);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], HrefDelegate.prototype, "href", null);
    __decorate([
        HostListener('click', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], HrefDelegate.prototype, "onClick", null);
    HrefDelegate = __decorate([
        Directive({
            selector: '[routerDirection],ion-anchor,ion-button,ion-item'
        }),
        __param(0, Optional()),
        __metadata("design:paramtypes", [Router,
            NavController,
            ElementRef])
    ], HrefDelegate);
    return HrefDelegate;
}());
export { HrefDelegate };
function textToIntent(direction) {
    switch (direction) {
        case 'forward': return 1 /* Forward */;
        case 'back': return 2 /* Back */;
        case 'root': return 3 /* Root */;
        default: return 0 /* Auto */;
    }
}
