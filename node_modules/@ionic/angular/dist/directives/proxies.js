/* tslint:disable */
/* auto-generated angular directive proxies */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { fromEvent } from 'rxjs';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, ViewEncapsulation } from '@angular/core';
export function proxyInputs(instance, el, props) {
    props.forEach(function (propName) {
        Object.defineProperty(instance, propName, {
            get: function () { return el[propName]; }, set: function (val) { return el[propName] = val; }
        });
    });
}
export function proxyOutputs(instance, el, events) {
    events.forEach(function (eventName) { return instance[eventName] = fromEvent(el, eventName); });
}
export function proxyMethods(instance, el, methods) {
    methods.forEach(function (methodName) {
        Object.defineProperty(instance, methodName, {
            get: function () {
                return function () {
                    var args = arguments;
                    return el.componentOnReady().then(function (el) { return el[methodName].apply(el, args); });
                };
            }
        });
    });
}
var App = /** @class */ (function () {
    function App() {
    }
    App = __decorate([
        Component({ selector: 'ion-app', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], App);
    return App;
}());
export { App };
var Avatar = /** @class */ (function () {
    function Avatar() {
    }
    Avatar = __decorate([
        Component({ selector: 'ion-avatar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], Avatar);
    return Avatar;
}());
export { Avatar };
var BackButton = /** @class */ (function () {
    function BackButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'defaultHref', 'icon', 'text']);
    }
    BackButton = __decorate([
        Component({ selector: 'ion-back-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'defaultHref', 'icon', 'text'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], BackButton);
    return BackButton;
}());
export { BackButton };
var Backdrop = /** @class */ (function () {
    function Backdrop(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['visible', 'tappable', 'stopPropagation']);
        proxyOutputs(this, el, ['ionBackdropTap']);
    }
    Backdrop = __decorate([
        Component({ selector: 'ion-backdrop', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['visible', 'tappable', 'stopPropagation'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Backdrop);
    return Backdrop;
}());
export { Backdrop };
var Badge = /** @class */ (function () {
    function Badge(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Badge = __decorate([
        Component({ selector: 'ion-badge', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Badge);
    return Badge;
}());
export { Badge };
var Button = /** @class */ (function () {
    function Button(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'buttonType', 'disabled', 'expand', 'fill', 'routerDirection', 'href', 'shape', 'size', 'strong', 'type']);
        proxyOutputs(this, el, ['ionFocus', 'ionBlur']);
    }
    Button = __decorate([
        Component({ selector: 'ion-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'buttonType', 'disabled', 'expand', 'fill', 'routerDirection', 'href', 'shape', 'size', 'strong', 'type'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Button);
    return Button;
}());
export { Button };
var Buttons = /** @class */ (function () {
    function Buttons() {
    }
    Buttons = __decorate([
        Component({ selector: 'ion-buttons', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], Buttons);
    return Buttons;
}());
export { Buttons };
var Card = /** @class */ (function () {
    function Card(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Card = __decorate([
        Component({ selector: 'ion-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Card);
    return Card;
}());
export { Card };
var CardContent = /** @class */ (function () {
    function CardContent(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode']);
    }
    CardContent = __decorate([
        Component({ selector: 'ion-card-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], CardContent);
    return CardContent;
}());
export { CardContent };
var CardHeader = /** @class */ (function () {
    function CardHeader(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'translucent']);
    }
    CardHeader = __decorate([
        Component({ selector: 'ion-card-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'translucent'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], CardHeader);
    return CardHeader;
}());
export { CardHeader };
var CardSubtitle = /** @class */ (function () {
    function CardSubtitle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    CardSubtitle = __decorate([
        Component({ selector: 'ion-card-subtitle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], CardSubtitle);
    return CardSubtitle;
}());
export { CardSubtitle };
var CardTitle = /** @class */ (function () {
    function CardTitle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    CardTitle = __decorate([
        Component({ selector: 'ion-card-title', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], CardTitle);
    return CardTitle;
}());
export { CardTitle };
var Checkbox = /** @class */ (function () {
    function Checkbox(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'name', 'checked', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    Checkbox = __decorate([
        Component({ selector: 'ion-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'name', 'checked', 'disabled', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Checkbox);
    return Checkbox;
}());
export { Checkbox };
var Chip = /** @class */ (function () {
    function Chip(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'outline']);
    }
    Chip = __decorate([
        Component({ selector: 'ion-chip', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'outline'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Chip);
    return Chip;
}());
export { Chip };
var Col = /** @class */ (function () {
    function Col(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['offset', 'offsetXs', 'offsetSm', 'offsetMd', 'offsetLg', 'offsetXl', 'pull', 'pullXs', 'pullSm', 'pullMd', 'pullLg', 'pullXl', 'push', 'pushXs', 'pushSm', 'pushMd', 'pushLg', 'pushXl', 'size', 'sizeXs', 'sizeSm', 'sizeMd', 'sizeLg', 'sizeXl']);
    }
    Col = __decorate([
        Component({ selector: 'ion-col', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['offset', 'offsetXs', 'offsetSm', 'offsetMd', 'offsetLg', 'offsetXl', 'pull', 'pullXs', 'pullSm', 'pullMd', 'pullLg', 'pullXl', 'push', 'pushXs', 'pushSm', 'pushMd', 'pushLg', 'pushXl', 'size', 'sizeXs', 'sizeSm', 'sizeMd', 'sizeLg', 'sizeXl'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Col);
    return Col;
}());
export { Col };
var Content = /** @class */ (function () {
    function Content(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['getScrollElement', 'scrollToTop', 'scrollToBottom', 'scrollByPoint', 'scrollToPoint']);
        proxyInputs(this, el, ['color', 'fullscreen', 'forceOverscroll', 'scrollX', 'scrollY', 'scrollEvents']);
        proxyOutputs(this, el, ['ionScrollStart', 'ionScroll', 'ionScrollEnd']);
    }
    Content = __decorate([
        Component({ selector: 'ion-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'fullscreen', 'forceOverscroll', 'scrollX', 'scrollY', 'scrollEvents'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Content);
    return Content;
}());
export { Content };
var Datetime = /** @class */ (function () {
    function Datetime(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['open']);
        proxyInputs(this, el, ['mode', 'name', 'disabled', 'min', 'max', 'displayFormat', 'pickerFormat', 'cancelText', 'doneText', 'yearValues', 'monthValues', 'dayValues', 'hourValues', 'minuteValues', 'monthNames', 'monthShortNames', 'dayNames', 'dayShortNames', 'pickerOptions', 'placeholder', 'value']);
        proxyOutputs(this, el, ['ionCancel', 'ionChange', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    Datetime = __decorate([
        Component({ selector: 'ion-datetime', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'name', 'disabled', 'min', 'max', 'displayFormat', 'pickerFormat', 'cancelText', 'doneText', 'yearValues', 'monthValues', 'dayValues', 'hourValues', 'minuteValues', 'monthNames', 'monthShortNames', 'dayNames', 'dayShortNames', 'pickerOptions', 'placeholder', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Datetime);
    return Datetime;
}());
export { Datetime };
var Fab = /** @class */ (function () {
    function Fab(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['close']);
        proxyInputs(this, el, ['horizontal', 'vertical', 'edge', 'activated']);
    }
    Fab = __decorate([
        Component({ selector: 'ion-fab', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['horizontal', 'vertical', 'edge', 'activated'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Fab);
    return Fab;
}());
export { Fab };
var FabButton = /** @class */ (function () {
    function FabButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'activated', 'disabled', 'href', 'routerDirection', 'show', 'translucent', 'type']);
        proxyOutputs(this, el, ['ionFocus', 'ionBlur']);
    }
    FabButton = __decorate([
        Component({ selector: 'ion-fab-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'activated', 'disabled', 'href', 'routerDirection', 'show', 'translucent', 'type'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], FabButton);
    return FabButton;
}());
export { FabButton };
var FabList = /** @class */ (function () {
    function FabList(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['activated', 'side']);
    }
    FabList = __decorate([
        Component({ selector: 'ion-fab-list', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['activated', 'side'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], FabList);
    return FabList;
}());
export { FabList };
var Footer = /** @class */ (function () {
    function Footer(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'translucent']);
    }
    Footer = __decorate([
        Component({ selector: 'ion-footer', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'translucent'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Footer);
    return Footer;
}());
export { Footer };
var Grid = /** @class */ (function () {
    function Grid(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['fixed']);
    }
    Grid = __decorate([
        Component({ selector: 'ion-grid', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['fixed'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Grid);
    return Grid;
}());
export { Grid };
var Header = /** @class */ (function () {
    function Header(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'translucent']);
    }
    Header = __decorate([
        Component({ selector: 'ion-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'translucent'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Header);
    return Header;
}());
export { Header };
var Icon = /** @class */ (function () {
    function Icon(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['ariaLabel', 'color', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'size', 'src']);
    }
    Icon = __decorate([
        Component({ selector: 'ion-icon', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['ariaLabel', 'color', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'size', 'src'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Icon);
    return Icon;
}());
export { Icon };
var Img = /** @class */ (function () {
    function Img(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['alt', 'src']);
        proxyOutputs(this, el, ['ionImgDidLoad']);
    }
    Img = __decorate([
        Component({ selector: 'ion-img', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['alt', 'src'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Img);
    return Img;
}());
export { Img };
var InfiniteScroll = /** @class */ (function () {
    function InfiniteScroll(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete']);
        proxyInputs(this, el, ['threshold', 'disabled', 'position']);
        proxyOutputs(this, el, ['ionInfinite']);
    }
    InfiniteScroll = __decorate([
        Component({ selector: 'ion-infinite-scroll', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['threshold', 'disabled', 'position'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], InfiniteScroll);
    return InfiniteScroll;
}());
export { InfiniteScroll };
var InfiniteScrollContent = /** @class */ (function () {
    function InfiniteScrollContent(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['loadingSpinner', 'loadingText']);
    }
    InfiniteScrollContent = __decorate([
        Component({ selector: 'ion-infinite-scroll-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['loadingSpinner', 'loadingText'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], InfiniteScrollContent);
    return InfiniteScrollContent;
}());
export { InfiniteScrollContent };
var Input = /** @class */ (function () {
    function Input(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['color', 'mode', 'accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'debounce', 'disabled', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'spellcheck', 'step', 'size', 'type', 'value']);
        proxyOutputs(this, el, ['ionInput', 'ionChange', 'ionBlur', 'ionFocus', 'ionInputDidLoad', 'ionInputDidUnload', 'ionStyle']);
    }
    Input = __decorate([
        Component({ selector: 'ion-input', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'debounce', 'disabled', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'spellcheck', 'step', 'size', 'type', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Input);
    return Input;
}());
export { Input };
var Item = /** @class */ (function () {
    function Item(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'button', 'detail', 'detailIcon', 'disabled', 'href', 'lines', 'routerDirection', 'type']);
    }
    Item = __decorate([
        Component({ selector: 'ion-item', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'button', 'detail', 'detailIcon', 'disabled', 'href', 'lines', 'routerDirection', 'type'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Item);
    return Item;
}());
export { Item };
var ItemDivider = /** @class */ (function () {
    function ItemDivider(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    ItemDivider = __decorate([
        Component({ selector: 'ion-item-divider', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], ItemDivider);
    return ItemDivider;
}());
export { ItemDivider };
var ItemGroup = /** @class */ (function () {
    function ItemGroup() {
    }
    ItemGroup = __decorate([
        Component({ selector: 'ion-item-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], ItemGroup);
    return ItemGroup;
}());
export { ItemGroup };
var ItemOption = /** @class */ (function () {
    function ItemOption(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'disabled', 'expandable', 'href']);
    }
    ItemOption = __decorate([
        Component({ selector: 'ion-item-option', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'disabled', 'expandable', 'href'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], ItemOption);
    return ItemOption;
}());
export { ItemOption };
var ItemOptions = /** @class */ (function () {
    function ItemOptions(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['fireSwipeEvent']);
        proxyInputs(this, el, ['side']);
        proxyOutputs(this, el, ['ionSwipe']);
    }
    ItemOptions = __decorate([
        Component({ selector: 'ion-item-options', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['side'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], ItemOptions);
    return ItemOptions;
}());
export { ItemOptions };
var ItemSliding = /** @class */ (function () {
    function ItemSliding(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['getOpenAmount', 'getSlidingRatio', 'close', 'closeOpened']);
        proxyInputs(this, el, ['disabled']);
        proxyOutputs(this, el, ['ionDrag']);
    }
    ItemSliding = __decorate([
        Component({ selector: 'ion-item-sliding', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], ItemSliding);
    return ItemSliding;
}());
export { ItemSliding };
var Label = /** @class */ (function () {
    function Label(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'position']);
        proxyOutputs(this, el, ['ionStyle']);
    }
    Label = __decorate([
        Component({ selector: 'ion-label', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'position'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Label);
    return Label;
}());
export { Label };
var List = /** @class */ (function () {
    function List(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['closeSlidingItems']);
        proxyInputs(this, el, ['mode', 'lines', 'inset']);
    }
    List = __decorate([
        Component({ selector: 'ion-list', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'lines', 'inset'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], List);
    return List;
}());
export { List };
var ListHeader = /** @class */ (function () {
    function ListHeader(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color']);
    }
    ListHeader = __decorate([
        Component({ selector: 'ion-list-header', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], ListHeader);
    return ListHeader;
}());
export { ListHeader };
var Menu = /** @class */ (function () {
    function Menu(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['isOpen', 'isActive', 'open', 'close', 'toggle', 'setOpen']);
        proxyInputs(this, el, ['contentId', 'menuId', 'type', 'disabled', 'side', 'swipeGesture', 'maxEdgeStart']);
        proxyOutputs(this, el, ['ionWillOpen', 'ionWillClose', 'ionDidOpen', 'ionDidClose', 'ionMenuChange']);
    }
    Menu = __decorate([
        Component({ selector: 'ion-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['contentId', 'menuId', 'type', 'disabled', 'side', 'swipeGesture', 'maxEdgeStart'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Menu);
    return Menu;
}());
export { Menu };
var MenuButton = /** @class */ (function () {
    function MenuButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'menu', 'autoHide']);
    }
    MenuButton = __decorate([
        Component({ selector: 'ion-menu-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'menu', 'autoHide'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], MenuButton);
    return MenuButton;
}());
export { MenuButton };
var MenuToggle = /** @class */ (function () {
    function MenuToggle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['menu', 'autoHide']);
    }
    MenuToggle = __decorate([
        Component({ selector: 'ion-menu-toggle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['menu', 'autoHide'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], MenuToggle);
    return MenuToggle;
}());
export { MenuToggle };
var Nav = /** @class */ (function () {
    function Nav(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['push', 'insert', 'insertPages', 'pop', 'popTo', 'popToRoot', 'removeIndex', 'setRoot', 'setPages', 'setRouteId', 'getRouteId', 'getActive', 'getByIndex', 'canGoBack', 'getPrevious']);
        proxyInputs(this, el, ['delegate', 'swipeGesture', 'animated', 'animation', 'rootParams', 'root']);
        proxyOutputs(this, el, ['ionNavWillLoad', 'ionNavWillChange', 'ionNavDidChange']);
    }
    Nav = __decorate([
        Component({ selector: 'ion-nav', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['delegate', 'swipeGesture', 'animated', 'animation', 'rootParams', 'root'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Nav);
    return Nav;
}());
export { Nav };
var NavPop = /** @class */ (function () {
    function NavPop() {
    }
    NavPop = __decorate([
        Component({ selector: 'ion-nav-pop', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], NavPop);
    return NavPop;
}());
export { NavPop };
var NavPush = /** @class */ (function () {
    function NavPush(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['component', 'componentProps']);
    }
    NavPush = __decorate([
        Component({ selector: 'ion-nav-push', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['component', 'componentProps'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], NavPush);
    return NavPush;
}());
export { NavPush };
var NavSetRoot = /** @class */ (function () {
    function NavSetRoot(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['component', 'componentProps']);
    }
    NavSetRoot = __decorate([
        Component({ selector: 'ion-nav-set-root', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['component', 'componentProps'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], NavSetRoot);
    return NavSetRoot;
}());
export { NavSetRoot };
var Note = /** @class */ (function () {
    function Note(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Note = __decorate([
        Component({ selector: 'ion-note', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Note);
    return Note;
}());
export { Note };
var Radio = /** @class */ (function () {
    function Radio(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'name', 'disabled', 'checked', 'value']);
        proxyOutputs(this, el, ['ionRadioDidLoad', 'ionRadioDidUnload', 'ionStyle', 'ionSelect', 'ionFocus', 'ionBlur']);
    }
    Radio = __decorate([
        Component({ selector: 'ion-radio', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'name', 'disabled', 'checked', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Radio);
    return Radio;
}());
export { Radio };
var RadioGroup = /** @class */ (function () {
    function RadioGroup(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['allowEmptySelection', 'name', 'value']);
        proxyOutputs(this, el, ['ionChange']);
    }
    RadioGroup = __decorate([
        Component({ selector: 'ion-radio-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['allowEmptySelection', 'name', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], RadioGroup);
    return RadioGroup;
}());
export { RadioGroup };
var Range = /** @class */ (function () {
    function Range(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'debounce', 'name', 'dualKnobs', 'min', 'max', 'pin', 'snaps', 'step', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionStyle', 'ionFocus', 'ionBlur']);
    }
    Range = __decorate([
        Component({ selector: 'ion-range', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'debounce', 'name', 'dualKnobs', 'min', 'max', 'pin', 'snaps', 'step', 'disabled', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Range);
    return Range;
}());
export { Range };
var Refresher = /** @class */ (function () {
    function Refresher(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete', 'cancel', 'getProgress']);
        proxyInputs(this, el, ['pullMin', 'pullMax', 'closeDuration', 'snapbackDuration', 'disabled']);
        proxyOutputs(this, el, ['ionRefresh', 'ionPull', 'ionStart']);
    }
    Refresher = __decorate([
        Component({ selector: 'ion-refresher', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['pullMin', 'pullMax', 'closeDuration', 'snapbackDuration', 'disabled'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Refresher);
    return Refresher;
}());
export { Refresher };
var RefresherContent = /** @class */ (function () {
    function RefresherContent(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText']);
    }
    RefresherContent = __decorate([
        Component({ selector: 'ion-refresher-content', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], RefresherContent);
    return RefresherContent;
}());
export { RefresherContent };
var Reorder = /** @class */ (function () {
    function Reorder() {
    }
    Reorder = __decorate([
        Component({ selector: 'ion-reorder', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], Reorder);
    return Reorder;
}());
export { Reorder };
var ReorderGroup = /** @class */ (function () {
    function ReorderGroup(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['complete']);
        proxyInputs(this, el, ['disabled']);
        proxyOutputs(this, el, ['ionItemReorder']);
    }
    ReorderGroup = __decorate([
        Component({ selector: 'ion-reorder-group', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], ReorderGroup);
    return ReorderGroup;
}());
export { ReorderGroup };
var RippleEffect = /** @class */ (function () {
    function RippleEffect(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['addRipple']);
    }
    RippleEffect = __decorate([
        Component({ selector: 'ion-ripple-effect', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], RippleEffect);
    return RippleEffect;
}());
export { RippleEffect };
var Row = /** @class */ (function () {
    function Row() {
    }
    Row = __decorate([
        Component({ selector: 'ion-row', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], Row);
    return Row;
}());
export { Row };
var Searchbar = /** @class */ (function () {
    function Searchbar(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['color', 'mode', 'animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'debounce', 'placeholder', 'searchIcon', 'showCancelButton', 'spellcheck', 'type', 'value']);
        proxyOutputs(this, el, ['ionInput', 'ionChange', 'ionCancel', 'ionClear', 'ionBlur', 'ionFocus']);
    }
    Searchbar = __decorate([
        Component({ selector: 'ion-searchbar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'debounce', 'placeholder', 'searchIcon', 'showCancelButton', 'spellcheck', 'type', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Searchbar);
    return Searchbar;
}());
export { Searchbar };
var Segment = /** @class */ (function () {
    function Segment(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'disabled', 'scrollable', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionStyle']);
    }
    Segment = __decorate([
        Component({ selector: 'ion-segment', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'disabled', 'scrollable', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Segment);
    return Segment;
}());
export { Segment };
var SegmentButton = /** @class */ (function () {
    function SegmentButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode', 'checked', 'disabled', 'layout', 'value']);
        proxyOutputs(this, el, ['ionSelect']);
    }
    SegmentButton = __decorate([
        Component({ selector: 'ion-segment-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode', 'checked', 'disabled', 'layout', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], SegmentButton);
    return SegmentButton;
}());
export { SegmentButton };
var Select = /** @class */ (function () {
    function Select(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['open']);
        proxyInputs(this, el, ['mode', 'disabled', 'cancelText', 'okText', 'placeholder', 'name', 'selectedText', 'multiple', 'interface', 'interfaceOptions', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionCancel', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    Select = __decorate([
        Component({ selector: 'ion-select', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'disabled', 'cancelText', 'okText', 'placeholder', 'name', 'selectedText', 'multiple', 'interface', 'interfaceOptions', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Select);
    return Select;
}());
export { Select };
var SelectOption = /** @class */ (function () {
    function SelectOption(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['disabled', 'selected', 'value']);
        proxyOutputs(this, el, ['ionSelectOptionDidLoad', 'ionSelectOptionDidUnload']);
    }
    SelectOption = __decorate([
        Component({ selector: 'ion-select-option', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled', 'selected', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], SelectOption);
    return SelectOption;
}());
export { SelectOption };
var SelectPopover = /** @class */ (function () {
    function SelectPopover(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['header', 'subHeader', 'message', 'options']);
    }
    SelectPopover = __decorate([
        Component({ selector: 'ion-select-popover', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['header', 'subHeader', 'message', 'options'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], SelectPopover);
    return SelectPopover;
}());
export { SelectPopover };
var SkeletonText = /** @class */ (function () {
    function SkeletonText(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['width']);
    }
    SkeletonText = __decorate([
        Component({ selector: 'ion-skeleton-text', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['width'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], SkeletonText);
    return SkeletonText;
}());
export { SkeletonText };
var Slide = /** @class */ (function () {
    function Slide(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyOutputs(this, el, ['ionSlideChanged']);
    }
    Slide = __decorate([
        Component({ selector: 'ion-slide', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Slide);
    return Slide;
}());
export { Slide };
var Slides = /** @class */ (function () {
    function Slides(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['update', 'slideTo', 'slideNext', 'slidePrev', 'getActiveIndex', 'getPreviousIndex', 'length', 'isEnd', 'isBeginning', 'startAutoplay', 'stopAutoplay', 'lockSwipeToNext', 'lockSwipeToPrev', 'lockSwipes']);
        proxyInputs(this, el, ['mode', 'options', 'pager', 'scrollbar']);
        proxyOutputs(this, el, ['ionSlidesDidLoad', 'ionSlideTap', 'ionSlideDoubleTap', 'ionSlideWillChange', 'ionSlideDidChange', 'ionSlideNextStart', 'ionSlidePrevStart', 'ionSlideNextEnd', 'ionSlidePrevEnd', 'ionSlideTransitionStart', 'ionSlideTransitionEnd', 'ionSlideDrag', 'ionSlideReachStart', 'ionSlideReachEnd', 'ionSlideTouchStart', 'ionSlideTouchEnd']);
    }
    Slides = __decorate([
        Component({ selector: 'ion-slides', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'options', 'pager', 'scrollbar'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Slides);
    return Slides;
}());
export { Slides };
var Spinner = /** @class */ (function () {
    function Spinner(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'duration', 'name', 'paused']);
    }
    Spinner = __decorate([
        Component({ selector: 'ion-spinner', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'duration', 'name', 'paused'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Spinner);
    return Spinner;
}());
export { Spinner };
var SplitPane = /** @class */ (function () {
    function SplitPane(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['disabled', 'when']);
        proxyOutputs(this, el, ['ionChange', 'ionSplitPaneVisible']);
    }
    SplitPane = __decorate([
        Component({ selector: 'ion-split-pane', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['disabled', 'when'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], SplitPane);
    return SplitPane;
}());
export { SplitPane };
var Tab = /** @class */ (function () {
    function Tab(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['setActive']);
        proxyInputs(this, el, ['active', 'delegate', 'tab', 'component']);
    }
    Tab = __decorate([
        Component({ selector: 'ion-tab', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['active', 'delegate', 'tab', 'component'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Tab);
    return Tab;
}());
export { Tab };
var TabBar = /** @class */ (function () {
    function TabBar(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'layout', 'selectedTab', 'translucent']);
        proxyOutputs(this, el, ['ionTabBarChanged']);
    }
    TabBar = __decorate([
        Component({ selector: 'ion-tab-bar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'layout', 'selectedTab', 'translucent'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], TabBar);
    return TabBar;
}());
export { TabBar };
var TabButton = /** @class */ (function () {
    function TabButton(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'layout', 'href', 'tab', 'disabled']);
        proxyOutputs(this, el, ['ionTabButtonClick']);
    }
    TabButton = __decorate([
        Component({ selector: 'ion-tab-button', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'layout', 'href', 'tab', 'disabled'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], TabButton);
    return TabButton;
}());
export { TabButton };
var Tabs = /** @class */ (function () {
    function Tabs(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['select', 'setRouteId', 'getRouteId', 'getTab', 'getSelected']);
        proxyInputs(this, el, ['useRouter']);
        proxyOutputs(this, el, ['ionChange', 'ionNavWillLoad', 'ionNavWillChange', 'ionNavDidChange']);
    }
    Tabs = __decorate([
        Component({ selector: 'ion-tabs', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['useRouter'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Tabs);
    return Tabs;
}());
export { Tabs };
var Text = /** @class */ (function () {
    function Text(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Text = __decorate([
        Component({ selector: 'ion-text', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Text);
    return Text;
}());
export { Text };
var Textarea = /** @class */ (function () {
    function Textarea(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyMethods(this, el, ['setFocus']);
        proxyInputs(this, el, ['mode', 'color', 'autocapitalize', 'autofocus', 'clearOnEdit', 'debounce', 'disabled', 'maxlength', 'minlength', 'name', 'placeholder', 'readonly', 'required', 'spellcheck', 'cols', 'rows', 'wrap', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionInput', 'ionStyle', 'ionBlur', 'ionFocus']);
    }
    Textarea = __decorate([
        Component({ selector: 'ion-textarea', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'autocapitalize', 'autofocus', 'clearOnEdit', 'debounce', 'disabled', 'maxlength', 'minlength', 'name', 'placeholder', 'readonly', 'required', 'spellcheck', 'cols', 'rows', 'wrap', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Textarea);
    return Textarea;
}());
export { Textarea };
var Thumbnail = /** @class */ (function () {
    function Thumbnail() {
    }
    Thumbnail = __decorate([
        Component({ selector: 'ion-thumbnail', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>' })
    ], Thumbnail);
    return Thumbnail;
}());
export { Thumbnail };
var Toggle = /** @class */ (function () {
    function Toggle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['mode', 'color', 'name', 'checked', 'disabled', 'value']);
        proxyOutputs(this, el, ['ionChange', 'ionFocus', 'ionBlur', 'ionStyle']);
    }
    Toggle = __decorate([
        Component({ selector: 'ion-toggle', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['mode', 'color', 'name', 'checked', 'disabled', 'value'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Toggle);
    return Toggle;
}());
export { Toggle };
var Toolbar = /** @class */ (function () {
    function Toolbar(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color', 'mode']);
    }
    Toolbar = __decorate([
        Component({ selector: 'ion-toolbar', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color', 'mode'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], Toolbar);
    return Toolbar;
}());
export { Toolbar };
var ToolbarTitle = /** @class */ (function () {
    function ToolbarTitle(c, r) {
        c.detach();
        var el = r.nativeElement;
        proxyInputs(this, el, ['color']);
    }
    ToolbarTitle = __decorate([
        Component({ selector: 'ion-title', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: '<ng-content></ng-content>', inputs: ['color'] }),
        __metadata("design:paramtypes", [ChangeDetectorRef, ElementRef])
    ], ToolbarTitle);
    return ToolbarTitle;
}());
export { ToolbarTitle };
